/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var React = require('react');
var PropTypes = require('prop-types');
var cx = require('classnames');
var iconsReact = require('@carbon/icons-react');
var Loading = require('../Loading/Loading.js');
var usePrefix = require('../../internal/usePrefix.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);

const InlineLoading = ({
  className,
  status = 'active',
  iconDescription,
  description,
  onSuccess,
  successDelay = 1500,
  ...rest
}) => {
  const prefix = usePrefix.usePrefix();
  const loadingClasses = cx__default["default"](`${prefix}--inline-loading`, className);
  const timerRef = React.useRef(null);
  React.useEffect(() => {
    if (status === 'finished') {
      timerRef.current = setTimeout(() => {
        if (onSuccess) {
          onSuccess();
        }
      }, successDelay);
    }
    return () => {
      if (timerRef.current) {
        clearTimeout(timerRef.current);
        timerRef.current = null;
      }
    };
  }, [status, onSuccess, successDelay]);
  const getLoading = () => {
    let iconLabel = iconDescription ? iconDescription : status;
    if (status === 'error') {
      return /*#__PURE__*/React__default["default"].createElement(iconsReact.ErrorFilled, {
        className: `${prefix}--inline-loading--error`
      }, /*#__PURE__*/React__default["default"].createElement("title", null, iconLabel));
    }
    if (status === 'finished') {
      return /*#__PURE__*/React__default["default"].createElement(iconsReact.CheckmarkFilled, {
        className: `${prefix}--inline-loading__checkmark-container`
      }, /*#__PURE__*/React__default["default"].createElement("title", null, iconLabel));
    }
    if (status === 'active') {
      if (!iconDescription) {
        iconLabel = 'loading';
      }
      return /*#__PURE__*/React__default["default"].createElement(Loading["default"], {
        small: true,
        description: iconLabel,
        withOverlay: false,
        active: status === 'active'
      });
    }
    if (status === 'inactive') {
      if (!iconDescription) {
        iconLabel = 'not loading';
      }
      return /*#__PURE__*/React__default["default"].createElement("title", {
        className: `${prefix}--inline-loading__inactive-status`
      }, iconLabel);
    }
    return undefined;
  };
  const loadingText = description && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--inline-loading__text`
  }, description);
  const loading = getLoading();
  const loadingAnimation = loading && /*#__PURE__*/React__default["default"].createElement("div", {
    className: `${prefix}--inline-loading__animation`
  }, loading);
  return /*#__PURE__*/React__default["default"].createElement("div", _rollupPluginBabelHelpers["extends"]({
    className: loadingClasses
  }, rest, {
    "aria-live": rest['aria-live'] ?? 'assertive'
  }), loadingAnimation, loadingText);
};
InlineLoading.propTypes = {
  /**
   * Specify a custom className to be applied to the container node
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the description for the inline loading text
   */
  description: PropTypes__default["default"].node,
  /**
   * Specify the description for the inline loading text
   */
  iconDescription: PropTypes__default["default"].string,
  /**
   * Provide an optional handler to be invoked when <InlineLoading> is
   * successful
   */
  onSuccess: PropTypes__default["default"].func,
  /**
   * Specify the loading status
   */
  status: PropTypes__default["default"].oneOf(['inactive', 'active', 'finished', 'error']),
  /**
   * Provide a delay for the `setTimeout` for success
   */
  successDelay: PropTypes__default["default"].number
};

exports["default"] = InlineLoading;
