/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _rollupPluginBabelHelpers = require('../../_virtual/_rollupPluginBabelHelpers.js');
var cx = require('classnames');
var PropTypes = require('prop-types');
var React = require('react');
var usePrefix = require('../../internal/usePrefix.js');
var GridContext = require('./GridContext.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var cx__default = /*#__PURE__*/_interopDefaultLegacy(cx);
var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);
var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

const CSSGrid = /*#__PURE__*/React__default["default"].forwardRef(({
  align,
  as,
  children,
  className: customClassName,
  condensed = false,
  fullWidth = false,
  narrow = false,
  ...rest
}, ref) => {
  const prefix = usePrefix.usePrefix();
  const {
    subgrid
  } = GridContext.useGridSettings();
  let mode = 'wide';
  if (narrow) {
    mode = 'narrow';
  } else if (condensed) {
    mode = 'condensed';
  }
  if (subgrid) {
    return /*#__PURE__*/React__default["default"].createElement(GridContext.GridSettings, {
      mode: "css-grid",
      subgrid: true
    }, /*#__PURE__*/React__default["default"].createElement(Subgrid, _rollupPluginBabelHelpers["extends"]({
      ref: ref,
      as: as,
      className: customClassName,
      mode: mode
    }, rest), children));
  }
  const className = cx__default["default"](customClassName, {
    [`${prefix}--css-grid`]: true,
    [`${prefix}--css-grid--condensed`]: mode === 'condensed',
    [`${prefix}--css-grid--narrow`]: mode === 'narrow',
    [`${prefix}--css-grid--full-width`]: fullWidth,
    [`${prefix}--css-grid--start`]: align === 'start',
    [`${prefix}--css-grid--end`]: align === 'end'
  });

  // cast as any to let TypeScript allow passing in attributes to base component
  const BaseComponent = as || 'div';
  return /*#__PURE__*/React__default["default"].createElement(GridContext.GridSettings, {
    mode: "css-grid",
    subgrid: true
  }, /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({
    className: className,
    ref: ref
  }, rest), children));
});
CSSGrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Specify grid alignment. Default is center
   */
  align: PropTypes__default["default"].oneOf(['start', 'center', 'end']),
  /**
   * Pass in content that will be rendered within the `Grid`
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify a custom className to be applied to the `Grid`
   */
  className: PropTypes__default["default"].string,
  /**
   * Collapse the gutter to 1px. Useful for fluid layouts.
   * Rows have 1px of margin between them to match gutter.
   */
  condensed: PropTypes__default["default"].bool,
  /**
   * Remove the default max width that the grid has set
   */
  fullWidth: PropTypes__default["default"].bool,
  /**
   * Container hangs 16px into the gutter. Useful for
   * typographic alignment with and without containers.
   */
  narrow: PropTypes__default["default"].bool
};
const Subgrid = /*#__PURE__*/React__default["default"].forwardRef(({
  as,
  className: customClassName,
  children,
  mode,
  ...rest
}, ref) => {
  const prefix = usePrefix.usePrefix();
  const className = cx__default["default"](customClassName, {
    [`${prefix}--subgrid`]: true,
    [`${prefix}--subgrid--condensed`]: mode === 'condensed',
    [`${prefix}--subgrid--narrow`]: mode === 'narrow',
    [`${prefix}--subgrid--wide`]: mode === 'wide'
  });
  const BaseComponent = as || 'div';
  return /*#__PURE__*/React__default["default"].createElement(BaseComponent, _rollupPluginBabelHelpers["extends"]({}, rest, {
    ref: ref,
    className: className
  }), children);
});
Subgrid.propTypes = {
  /**
   * Provide a custom element to render instead of the default <div>
   */
  as: PropTypes__default["default"].oneOfType([PropTypes__default["default"].string, PropTypes__default["default"].elementType]),
  /**
   * Pass in content that will be rendered within the `Subgrid`
   */
  children: PropTypes__default["default"].node,
  /**
   * Specify a custom className to be applied to the `Subgrid`
   */
  className: PropTypes__default["default"].string,
  /**
   * Specify the gutter mode for the subgrid
   */
  mode: PropTypes__default["default"].oneOf(['wide', 'narrow', 'condensed'])
};
const CSSGridComponent = CSSGrid;

exports.CSSGrid = CSSGridComponent;
