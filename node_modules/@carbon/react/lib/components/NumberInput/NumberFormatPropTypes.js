/**
 * Copyright IBM Corp. 2016, 2023
 *
 * This source code is licensed under the Apache-2.0 license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var PropTypes = require('prop-types');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var PropTypes__default = /*#__PURE__*/_interopDefaultLegacy(PropTypes);

const NumberFormatOptionsPropType = PropTypes__default["default"].shape({
  // Locale Options
  localeMatcher: PropTypes__default["default"].oneOf(['best fit', 'lookup']),
  // Style Options
  style: PropTypes__default["default"].oneOf(['decimal', 'currency', 'percent', 'unit']),
  currency: PropTypes__default["default"].string,
  // e.g., 'USD'
  currencyDisplay: PropTypes__default["default"].oneOf(['symbol', 'narrowSymbol', 'code', 'name']),
  currencySign: PropTypes__default["default"].oneOf(['standard', 'accounting']),
  unit: PropTypes__default["default"].string,
  // e.g., 'liter', 'mile-per-hour'
  unitDisplay: PropTypes__default["default"].oneOf(['short', 'narrow', 'long']),
  notation: PropTypes__default["default"].oneOf(['standard', 'scientific', 'engineering', 'compact']),
  compactDisplay: PropTypes__default["default"].oneOf(['short', 'long']),
  signDisplay: PropTypes__default["default"].oneOf(['auto', 'never', 'always', 'exceptZero']),
  // Digit Options
  minimumIntegerDigits: PropTypes__default["default"].number,
  minimumFractionDigits: PropTypes__default["default"].number,
  maximumFractionDigits: PropTypes__default["default"].number,
  minimumSignificantDigits: PropTypes__default["default"].number,
  maximumSignificantDigits: PropTypes__default["default"].number,
  useGrouping: PropTypes__default["default"].oneOfType([PropTypes__default["default"].bool, PropTypes__default["default"].oneOf(['always', 'auto', 'min2'])]),
  // Misc/Other Options
  numberingSystem: PropTypes__default["default"].string,
  // e.g., 'latn', 'arab'
  roundingIncrement: PropTypes__default["default"].number,
  roundingMode: PropTypes__default["default"].oneOf(['ceil', 'floor', 'expand', 'trunc', 'halfCeil', 'halfFloor', 'halfExpand', 'halfTrunc', 'halfEven']),
  trailingZeroDisplay: PropTypes__default["default"].oneOf(['auto', 'stripIfInteger'])
});

exports.NumberFormatOptionsPropType = NumberFormatOptionsPropType;
